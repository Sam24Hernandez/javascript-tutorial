/****************************** Introducción a Javascript ******************************/

¡Bienvenido a la Introducción de Javascript para principiantes!

¿Qué es Javascript?

Javascript es un lenguaje de programación o de secuencias de comandos que te permite
implementar funciones complejas en páginas web, cada vez que una página web hace algo
más que sentarse allí y mostrar información estática para que la veas, muestra oportunas
actualizaciones de contenido, mapas interactivos, animación de Gráficos 2D/3D, desplazamiento
de máquinas reproductoras de vídeo, etc, puedes apostar que probablemente Javascrip está 
involucrado. Es la tercera capa del pastel de las tecnologías web estándar, dos de los cuales
(HTML y CSS).

En definición, estás tres capas definen la web:

* HTML: es el lenguaje de marcado que usamos para estructurar y dar significado a nuestro contenido 
        web, por ejemplo, escribiendo titulos, encabezados y tablas de datos.

* CSS: es el lenguaje de reglas de estilo que usamos para aplicar estilo a nuestro contenido HTML,
       por ejemplo, establecer colores de fondo, tipos de letra, dividir en columnas el contenido.

* Javascript: es el lenguaje de secuencias de comandos que te permite crear contenido dinámico, controlar
              multimedia, animar imágenes y prácticamente todo lo demás.


¿Qué está haciendo JavaScript en tu página?

Aquí, de hecho, comenzaremos a ver algo de código y, mientras lo hacemos, exploraremos lo que realmente 
sucede cuando ejecutas JavaScript en tu página.

Recapitulemos brevemente sobre la historia de lo que sucede cuando cargas una página web en un navegador. 
Cuando cargas una página web en tu navegador, estás ejecutando tu código (HTML, CSS y JavaScript) dentro de 
un entorno de ejecución (la pestaña del navegador). Esto es como una fábrica que toma materias primas (el código) 
y genera un producto (la página web).

Orden de ejecución de Javascript

Cuando el navegador encuentra un bloque de JavaScript, generalmente lo ejecuta en orden, de arriba a abajo. 
Esto significa que debes tener cuidado con el orden en el que colocas las cosas. Por ejemplo, volvamos al 
bloque de JavaScript que vimos en nuestro primer ejemplo:

Aquí seleccionamos un titulo de texto (línea 1), luego adjuntamos un detector de eventos (línea 3) 
de modo que cuando se hace clic en el titulo, el bloque de código updateName() (líneas 5-8) se ejecuta. 
El bloque de código updateName() (estos tipos de bloques de código reutilizables se denominan "funciones") 
pide al usuario un nuevo nombre y luego inserta ese nombre en el titulo para actualizar la pantalla.

Si cambiaras el orden de las dos primeras líneas de código, ya no funcionaría — en su lugar, obtendrías 
un error en la consola del desarrollador del navegador — TypeError: title is undefined. Esto significa que el objeto titulo aún no existe, 
por lo que no podemos agregarle un detector de eventos.

/****************************** Código interpretado vs compilado ******************************/

Es posible que escuches los términos interpretados y compilados en el contexto de la programación. En los lenguajes interpretados, 
el código se ejecuta de arriba a abajo y el resultado de ejecutar el código se devuelve inmediatamente. No tienes que transformar 
el código en una forma diferente antes de que el navegador lo ejecute. El código se recibe en su forma de texto amigable para el 
programador y se procesa directamente desde allí.

Los lenguajes compilados, por otro lado, se transforman (compilan) a código máquina antes de que sean ejecutados por la computadora. 
Por ejemplo, C/C++ se compila a código máquina que luego ejecuta la computadora. El programa se ejecuta desde un formato binario, 
que se generó a partir del código fuente del programa original.

JavaScript es un lenguaje de programación interpretado ligero. El navegador web recibe el código JavaScript en su forma de texto original 
y ejecuta el script a partir de ahí. Desde un punto de vista técnico, la mayoría de los intérpretes de JavaScript modernos utilizan una técnica 
llamada compilación en tiempo real para mejorar el rendimiento; el código fuente de JavaScript se compila en un formato binario más rápido mientras 
se usa el script, de modo que se pueda ejecutar lo más rápido posible. Sin embargo, JavaScript todavía se considera un lenguaje interpretado, ya que 
la compilación se maneja en el entorno de ejecución, en lugar de antes.

Ambos tipos de lenguaje tienen ventajas, pero no las abordaremos ahora.

/****************************** Código de lado del servidor vs de lado del cliente ******************************/

También puedes escuchar los términos código de lado del servidor y de lado del cliente, especialmente en el contexto del desarrollo web. 
El código de lado del cliente es un código que se ejecuta en la computadora del usuario(navegador web) — cuando se ve una página web, 
el código de lado del cliente de la página se descarga, luego se ejecuta y se muestra en el navegador. 
En este módulo estamos hablando explícitamente de JavaScript de lado del cliente.

El código de lado del servidor, por otro lado, se ejecuta en el servidor, luego sus resultados se descargan y se muestran 
en el navegador. Ejemplos de lenguajes web populares de lado del servidor incluyen a ¡PHP, Python, Ruby, ASP.NET y... JavaScript! 
JavaScript también se puede utilizar como lenguaje de lado del servidor, por ejemplo, en el popular entorno Node.js

/****************************** Estrategias para la carga de scripts ******************************/

Hay una serie de problemas relacionados con la carga de los scripts en el momento adecuado. ¡Nada es tan simple como parece! 
Un problema común es que todo el HTML de una página se carga en el orden en que aparece. Si estás utilizando JavaScript para 
manipular elementos en la página (o exactamente, el Modelo de objetos del documento), tu código no funcionará si el JavaScript 
se carga y procesa antes que el HTML que estás intentando haga algo.

En los ejemplos de código anteriores, en los ejemplos internos y externos, JavaScript se carga y se ejecuta en el encabezado del documento, 
antes de analizar el cuerpo HTML. Esto podría causar un error, por lo que hemos utilizado algunas construcciones para solucionarlo.

En el ejemplo externo, usamos una función de JavaScript más moderno para resolver el problema, el atributo defer, que le dice al 
navegador que continúe descargando el contenido HTML una vez que se ha alcanzado la etiqueta del elemento <script>.

En este caso, tanto el script como el HTML se cargarán simultáneamente y el código funcionará.

/****************************** async y defer ******************************/

En realidad, hay dos modernas características que podemos usar para evitar el problema del bloqueo de script: async y defer (que vimos anteriormente). 
Veamos la diferencia entre estas dos.

Los scripts cargados con el atributo async (ve más abajo) descargarán el script sin bloquear el renderizado de la página y lo ejecutará tan pronto como 
el script se termine de descargar. No tienes garantía de que los scripts se ejecuten en un orden específico, solo que no detendrán la visualización del 
resto de la página. Es mejor usar async cuando los scripts de la página se ejecutan de forma independiente y no dependen de ningún otro script de la página.

<script async src="js/vendor/jquery.js"></script>

<script async src="js/script2.js"></script>

<script async src="js/script3.js"></script>

No puedes confiar en el orden en que se cargarán los scripts. jquery.js se puede cargar antes o después de script2.js y script3.js y si este es el caso, 
cualquier función en esos scripts dependiendo de jquery producirá un error porque jquery no se definirá en el momento en que se ejecute el script.

async se debe usar cuando tienes un montón de scripts en segundo plano para cargar, y solo deseas ponerlos en su lugar lo antes posible. 
Por ejemplo, tal vez tengas algunos archivos de datos del juego para cargar, que serán necesarios cuando el juego realmente comience, pero por ahora solo deseas 
continuar mostrando la introducción del juego, los títulos y el lobby, sin que se bloqueen al cargar el script.

Los scripts cargados con el atributo defer (ve a continuación) se ejecutarán en el orden en que aparecen en la página y los ejecutará tan pronto como se descarguen 
el script y el contenido:

<script defer src="js/vendor/jquery.js"></script>

<script defer src="js/script2.js"></script>

<script defer src="js/script3.js"></script>

Todos los scripts con el atributo defer se cargarán en el orden en que aparecen en la página. Entonces, en el segundo ejemplo, podemos estar seguros de que 
jquery.js se cargará antes que script2.js y script3.js y que script2.js se cargará antes de script3.js. No se ejecutarán hasta que se haya cargado todo el contenido de la página, 
lo cual es útil si tus scripts dependen de que el DOM esté en su lugar (por ejemplo, modifican uno o más elementos de la página).

Para resumir:

    async y defer indican al navegador que descargue los scripts en un hilo separado, mientras que el resto de la página (el DOM, etc.) se descarga, por 
    lo que los scripts no bloquean la carga de la página.
    Si tus scripts se deben ejecutar inmediatamente y no tienen ninguna dependencia, utiliza async.
    Si tus scripts necesitan esperar a ser procesados y dependen de otros scripts y/o del DOM en su lugar, cárgalos usando defer y coloca tus elementos <script> 
    correspondientes en el orden que desees que el navegador los ejecute.
