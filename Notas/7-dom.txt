/**************** ¿Qué es el DOM? ****************/

El modelo de objeto de documento (DOM) es una interfaz de programación para los documentos HTML y XML. 
Facilita una representación estructurada del documento y define de qué manera los programas pueden acceder, al fin de modificar, 
tanto su estructura, estilo y contenido. 

El DOM da una representación del documento como un grupo de nodos y objetos estructurados que tienen propiedades y métodos. 
Esencialmente, conecta las páginas web a scripts o lenguajes de programación.

Una página web es un documento. Éste documento puede exhibirse en la ventana de un navegador o también como código fuente HTML. 
Pero, en los dos casos, es el mismo documento. El modelo de objeto de documento (DOM) proporciona otras formas de presentar, guardar y manipular este mismo documento. 

El DOM es una representación completamente orientada al objeto de la página web y puede ser modificado con un lenguaje de script como JavaScript.

Por ejemplo, el DOM especifica que el método getElementsByTagName en el código de abajo debe devolver una lista de todos los elementos <p> del documento:

paragraphs = document.getElementsByTagName ("p");
// paragraphs[0] es el primer elemento <p>
// paragraphs[1] es el segundo elemento <p>, etc.
alert (paragraphs [0].nodeName);

/* ¿Como se accede al DOM? */
No se tiene que hacer nada especial para empezar a utilizar el DOM. Los diferentes navegadores tienen directrices DOM distintas, y éstas directrices tienen 
diversos grados de conformidad al actual estándar DOM (un tema que se intenta evitar en este manual), pero todos los navegadores web usan el modelo de objeto de documento 
para hacer accesibles las páginas web al script.

Cuando se crea un script - esté en un elemento <SCRIPT> o incluido en una página web por la instrucción de cargar un script - inmediatamente está disponible para usarlo con el API, 
accediendo así a los elementos document o window, para manipular el documento mismo o sus diferentes partes, las cuales son los varios elementos de una página web. 

La programación DOM hace algo tan simple como lo siguiente, lo cual abre un mensaje de alerta usando la función alert() desde el objeto window, o permite métodos DOM más 
sofisticados para crear realmente un nuevo contenido, como en el largo ejemplo dentro de la carpeta 8-dom.

TIPOS DE DATOS

document:

    Cuando un miembro devuelve un objeto del tipo document (por ejemplo, la propiedad ownerDocument de un elemento devuelve el documento "document" al cual pertenece), 
    este objeto es la raíz del objeto documento en sí mismo.

element:

    element se refiere a un elemento o a un nodo de tipo de elemento "element" devuelto por un miembro del API de DOM. Dicho de otra manera, por ejemplo, el método 
    document.createElement() devuelve un objeto referido a un nodo, lo que significa que este método devuelve el elemento que acaba de ser creado en el DOM. 
    Los objetos element ponen en funcionamiento a la interfaz Element del DOM y también a la interfaz de nodo "Node" más básica, las cuales son incluidas en esta referencia.

nodeList:

    Una "nodeList" es una serie de elementos, parecido a lo que devuelve el método document.getElementsByTagName(). Se accede a los items de la nodeList de cualquiera de las siguientes dos formas:

        list.item (1)
        lista [1]

    Ambas maneras son equivalentes. En la primera, item() es el método del objeto nodeList. En la última se utiliza la típica sintaxis de acceso a listas para llegar al segundo ítem de la lista.

attribute:

     	Cuando un atributo ("attribute") es devuelto por un miembro (por ej., por el método createAttribute()), es una referencia a un objeto que expone una interfaz particular (aunque limitada) a los atributos. 
        Los atributos son nodos en el DOM igual que los elementos, pero no suelen usarse así.

INTERFACES ESENCIALES EN EL DOM

* document.getElementsById(id)
* element.getElementsByTagName(name)
* document.createElement(name)
* parentNode.appendChild(node)
* element.innerHTML
* element.style.left
* element.setAttribute
* element.element.getAttribute
* element.addEventListener
* window.content
* window.onload
* window.dump
* window.scrollTo


