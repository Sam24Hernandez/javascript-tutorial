/************************* Un primer acercamiento a JavaScript *************************/

Ahora que has aprendido algo sobre la teoría de JavaScript y lo que puedes hacer con ella, te daremos un curso intensivo 
sobre las características básicas de JavaScript a través de un juego completamente práctico. 
Aquí crearás un sencillo juego de "Adivina el número", paso a paso.

No esperes entender todo el código inmediatamente — por ahora sólo queremos presentarte los conceptos de alto 
nivel, y darte una idea de como funciona JavaScript (y otros lenguajes de programación). 
¡Más adelante vas a volver a ver estas características con mucho más detalle!

Pensando como un  programador

Una de las cosas más difíciles de aprender en programación no es la sintaxis que necesita aprender, 
sino cómo aplicarla para resolver problemas del mundo real. Debes comenzar a pensar como un programador — 
esto generalmente implica mirar descripciones de lo que necesita hacer tu programa, determinar qué 
características de código necesitas para alcanzar esas cosas y cómo hacer que funcionen juntas.

Esto implica una combinación de trabajo duro, experiencia con la sintaxis de programación y práctica — 
más un poquito de creatividad. Mientras más programes, más habilidoso serás haciéndolo. No te podemos prometer que vas a desarrollar un 
"cerebro de programador" en cinco minutos, pero, a lo largo de este curso, te vamos a dar muchas oportunidades de practicar 
el pensar como un programador.

Teniendo esto en mente, veamos el ejemplo que vamos a construir en este artículo, y revisemos el proceso general de seccionarlo 
y dividirlo en tareas tangibles.

IMAGINATE ESTO, TU JEFE TE HA DADO EL SIGUIENTE RESUMEN PARA CREAR ESTE JUEGO:

# Quiero que crees un sencillo juego del tipo "adivina el número". 
# Se debe elegir un número aleatorio entre 1 y 100, luego desafiar al jugador a adivinar el número en 10 intentos. 
# Después de cada intento, debería decirle al jugador si ha acertado o no — y si está equivocado, debería decirle si se ha quedado corto o se ha pasado. 
# También debería decir los números que ya se probaron anteriormente. 
# El juego terminará una vez que el jugador acierte o cuando se acaben los intentos. 
# Cuando el juego termina, se le debe dar al jugador la opción de volver a jugar.

Al observar este resumen, lo primero que podemos hacer es comenzar a desglosar el proyecto en tareas simples y 
realizables, con la mayor mentalidad de programador posible:

    1. Generar un número aleatorio entre 1 y 100.
    2. Registrar el número del intento en el que el jugador se encuentre. Empezando en 1.
    3. Darle al jugador una forma de adivinar cuál es el número.
    4. Una vez que se ha introducido en número, registrarlo en alguna parte para que el jugador pueda ver sus intentos previos.
    5. A continuación, comprobar si el número es correcto.
    6. Si es correcto:
        1. Mostrar un mensaje de felicitaciones.
        2. Hacer que el jugador no pueda introducir más intentos (esto arruinaría el juego).
        3. Mostrar un control que permita al jugador volver a empezar el juego.
    7. Si es incorrecto y al jugador todavía le quedan intentos:
        1. Decirle al jugador que ha fallado.
        2. Dejar que el jugador lo intente de nuevo.
        3. Incrementa el número de intentos en 1.
    8. Si el jugador falla y no le quedan turnos:
        1. Decirle al jugador que el juego se ha terminado.
        2. Hacer que el jugador no pueda introducir más intentos (esto arruinaría el juego).
        3. Mostrar un control que permita al jugador volver a empezar el juego.
    9. Una vez que el juego se reinicia, asegúrate de que la lógica del juego y la IU (interfaz de usuario) se restablezcan por completo, 
        luego vuelve al paso 1.

Veamos cómo podemos trasformar estos pasos en código, construyendo el ejemplo y explorando las características de 
JavaScript a medida que avanzamos: Checa el código e intenta analizarlo,
no copies y pegues el código, trata de ir siguiendo las instrucciones y apegandote a la logica de como
funciona cada sentencia.

EXTRA: 

OPERADORES
Los operadores de JavaScript nos permiten realizar pruebas, hacer cálculo matemáticos, unir cadenas
y otras cosas similares.

Abre la consola de las herramientas para desarrolladores(Ctrl + shift + k).
Luego escribe los ejemplos siguientes:

Operador        Descripción         Ejemplo
+               Suma                6 + 9
-               Resta               20 - 15
*               Multiplicación      3 * 7   
/               División            10 / 5

También puedes usar el operador + para concatenar(unir cadenas de texto). Intenta esto:
let name = 'Sam'; // Pulsa Enter en cada instruccion y ve el resultado
name; 
let hello = ' dice hola!';
hello;
let saludo = '¡' + name + hello;
saludo;

Operadores de asignación: Cuando ejecutamos pruebas de verdadero/falso(por ejemplo dentro de condicionales), por ejemplo:

Operador        Descripción             Ejemplo
===             Igualdad estricta       5 === 2 + 4 // false
                (exactamente igual)     5 === 2 + 3 // true
                
!==             No igual                5 !== 2 + 4 // true
                                        5 !== 2 + 3 // false

< >             Menor que y Mayor que   6 < 10 // true
                                        6 > 10 // false

BUCLES
Una parte del código anterior que debemos examinar detalladamente es el bucle for. Los bucles son un muy 
importante concepto en programación, estos te permiten seguir ejecutando un fragmento de código una y otra vez, 
hasta que se cumpla una determinada condición.

Para empezar, de nuevo ve a tu consola JavaScript de las herramientas para desarrolladores del navegador e 
introduce lo siguiente:

for (let i = 1 ; i < 21 ; i++) { console.log(i) }

Da enter y mira que sucede:
Si lo hiciste miraras los numeros del 1 al 20 en tu consola.
Esto se debe al bucle for.

Estructura del bucle for toma tres valores(argumentos) de entrada:

    1. Un valor inicial: En este caso, comenzamos a contar en 1, pero este podría ser cualquier número que desees. 
        También puedes reemplazar la letra i con cualquier nombre que desees, pero por convención se usa i porque es corto y fácil de recordar.
    2. Una condición de salida: Aquí hemos especificado i < 21 — el ciclo continuará hasta que i no sea menor que 21. 
        Cuando i llegue a 21, el bucle ya no se ejecutará.
    3. Un incremento: Hemos especificado i++, que significa "agrega 1 a i". El ciclo se ejecutará una vez por cada valor de i, 
        hasta que i alcance un valor de 21 (como se explicó anteriormente). En este caso, simplemente imprimimos el valor de i en la consola en cada iteración 
        usando console.log().

Jugando con los objetos del navegador
Juguemos un poco con algunos objetos del navegador, ya para finalizar.

    1. En primer lugar, abre tu programa en un navegador.
    2. A continuación, abre las herramientas de desarrollo del navegador y asegúrate de que la pestaña de la 
        consola JavaScript esté abierta.
    3. Escribe adivinaField y la consola te mostrará que la variable contiene un elemento <input>. 
        También notarás que la consola te ayuda completando automáticamente los nombres de los objetos que existen dentro del entorno de ejecución, 
        ¡incluidas tus variables!
    4. Ahora escribe lo siguiente: 
        adivinaField.value = 'Hola';
    La propiedad value representa el valor actual ingresado en el campo de texto. Verás que al ingresar este comando, 
    ¡hemos cambiado este valor!
    5. Ahora intenta escribir suposiciones en la consola y presiona Intro. 
        La consola te muestra que la variable contiene un elemento <p>.
    6. Ahora intenta ingresar la siguiente línea: 
        suposiciones.value
    El navegador devuelve undefined, porque los párrafos no tienen la propiedad value.
    7. Para cambiar el texto dentro de un párrafo, necesitas la propiedad textContent en su lugar. Prueba esto: 
        suposiciones.textContent = '¿Dónde está mi párrafo?';